// <auto-generated />
using System;
using MarketAnalyzer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MarketAnalyzer.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220218214515_AddWeekIndicators")]
    partial class AddWeekIndicators
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MarketAnalyzer.Data.Model.Item", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("MarketAnalyzer.Data.Model.ItemIndicator", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("BasePrice")
                        .HasColumnType("bigint");

                    b.Property<long>("Count")
                        .HasColumnType("bigint");

                    b.Property<long>("DailyVolume")
                        .HasColumnType("bigint");

                    b.Property<long>("ItemId")
                        .HasColumnType("bigint");

                    b.Property<long>("JobRunId")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalTrades")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("JobRunId");

                    b.ToTable("ItemIndicators");
                });

            modelBuilder.Entity("MarketAnalyzer.Data.Model.ItemWeekIndicator", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AvgDailyVolume")
                        .HasColumnType("bigint");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<long>("ItemId")
                        .HasColumnType("bigint");

                    b.Property<long>("MaxCount")
                        .HasColumnType("bigint");

                    b.Property<long>("MaxDailyVolume")
                        .HasColumnType("bigint");

                    b.Property<long>("MaxPrice")
                        .HasColumnType("bigint");

                    b.Property<long>("MinCount")
                        .HasColumnType("bigint");

                    b.Property<long>("MinDailyVolume")
                        .HasColumnType("bigint");

                    b.Property<long>("MinPrice")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("TradesCount")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("ItemWeekIndicators");
                });

            modelBuilder.Entity("MarketAnalyzer.Data.Model.JobRun", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("DetailedMessage")
                        .HasColumnType("text");

                    b.Property<DateTime>("RunDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("JobRuns");
                });

            modelBuilder.Entity("MarketAnalyzer.Data.Model.ItemIndicator", b =>
                {
                    b.HasOne("MarketAnalyzer.Data.Model.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MarketAnalyzer.Data.Model.JobRun", "JobRun")
                        .WithMany()
                        .HasForeignKey("JobRunId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("JobRun");
                });

            modelBuilder.Entity("MarketAnalyzer.Data.Model.ItemWeekIndicator", b =>
                {
                    b.HasOne("MarketAnalyzer.Data.Model.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });
#pragma warning restore 612, 618
        }
    }
}
